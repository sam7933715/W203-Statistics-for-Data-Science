plot(table(x), main="Count data")
likelihood <- function(obs, freq)
{
likelihood <- 1
for (i in 1:length(obs))
{
likelihood <- likelihood * (lambda^obs[i] * exp(-lambda))/factorial(obs[i])^freq[i]
}
}
return(likelihood)
}
likelihood <- function(obs, freq)
{
likelihood <- 1
for (i in 1:length(obs))
{
likelihood <- likelihood * (lambda^obs[i] * exp(-lambda))/factorial(obs[i])^freq[i]
}
return(likelihood)
}
fn <- function(p) {likelihood(obs, freq)}
optimize(fn, interval = c(0,1000000), maximum = T)
fn <- function(lambda) {likelihood(obs, freq)}
optimize(fn, interval = c(0,1000000), maximum = T)
fn <- function(lambda) {likelihood(obs, freq,lambda)}
optimize(fn, interval = c(0,1000000), maximum = T)
likelihood <- function(obs, freq, lambda)
{
likelihood <- 1
for (i in 1:length(obs))
{
likelihood <- likelihood * (lambda^obs[i] * exp(-lambda))/factorial(obs[i])^freq[i]
}
return(likelihood)
}
fn <- function(lambda) {likelihood(obs, freq,lambda)}
optimize(fn, interval = c(0,1000000), maximum = T)
optimize(fn, interval = c(-1000000,1000000), maximum = T)
fn <- function(lambda) {likelihood(obs, freq,lambda)}
optimize(fn, interval = c(0,1000), maximum = T)
likelihood <- function(obs, freq, lambda)
{
likelihood <- 1
for (i in 1:length(obs))
{
likelihood <- likelihood * ((lambda^obs[i] * exp(-lambda))/factorial(obs[i]))^freq[i]
}
return(likelihood)
}
fn <- function(lambda) {likelihood(obs, freq,lambda)}
optimize(fn, interval = c(0,1000), maximum = T)
fn <- function(lambda) {likelihood(obs, freq,lambda)}
optimize(fn, interval = c(0,1000000), maximum = T)
optimize(fn, interval = c(0,12), maximum = T)
obs = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 17, 42, 43)
freq = c(1392, 1711, 914, 468, 306, 192, 96, 56, 35, 17, 15, 6, 2, 2, 1, 1)
likelihood <- function(obs, freq, lambda)
{
likelihood <- 1
for (i in 1:length(obs))
{
likelihood <- likelihood * ((lambda^obs[i] * exp(-lambda))/factorial(obs[i]))^freq[i]
}
return(likelihood)
}
x <- rep(obs, freq)
x
length(obs)
length(freq)
fn
optimize(fn, interval = c(0,12), maximum = T)
x <- rep(obs, freq)
plot(table(x), main="Count data")
table(x)
likelihood <- function(obs, freq, lambda)
{
likelihood <- 1
for (i in 1:length(obs))
{
likelihood <- likelihood * ((lambda^obs[i] * exp(-lambda))/factorial(obs[i]))^freq[i]
}
return(likelihood)
}
fn <- function(lambda) {likelihood(obs, freq,lambda)}
fn
optimize(fn, interval = c(0,12), maximum = T)
qplot(p,
sapply(p, function(lambda) {likelihood(obs, freq,lambda)}),
geom = 'line',
main = 'Likelihood as a Function of P',
xlab = 'P',
ylab = 'Likelihood')
y <- rep(obs, freq)
plot(table(y), main="Count data")
table(y)
likelihood <- function(obs, freq, lambda)
{
likelihood <- 1
for (a in 1:length(obs))
{
likelihood <- likelihood * ((lambda^obs[a] * exp(-lambda))/factorial(obs[a]))^freq[a]
}
return(likelihood)
}
fn <- function(lambda) {likelihood(obs, freq,lambda)}
optimize(fn, interval = c(0,12), maximum = T)
install.packages('ggplot2')
library(ggplot2)
qplot(p,
sapply(p, function(lambda) {likelihood(obs, freq,lambda)}),
geom = 'line',
main = 'Likelihood as a Function of P',
xlab = 'P',
ylab = 'Likelihood')
qplot(dalamb,
sapply(lambda, function(lambda) {likelihood(obs, freq,lambda)}),
geom = 'line',
main = 'Likelihood as a Function of P',
xlab = 'P',
ylab = 'Likelihood')
qplot(lambda,
sapply(lambda, function(lambda) {likelihood(obs, freq,lambda)}),
geom = 'line',
main = 'Likelihood as a Function of P',
xlab = 'P',
ylab = 'Likelihood')
qplot(lambda,
sapply(lambda, function(lambda) {likelihood(obs, freq,lambda)}),
geom = 'line',
main = 'Likelihood as a Function of P',
xlab = 'P',
ylab = 'Likelihood')
likelihood <- function(obs, freq, lambda)
{
likelihood <- 1
for (a in 1:length(obs))
{
likelihood <- likelihood * ((lambda^obs[a] * exp(-lambda))/factorial(obs[a]))^freq[a]
}
return(likelihood)
}
n <- function(lambda) {likelihood(obs, freq, lambda)}
fn <- function(lambda) {likelihood(obs, freq, lambda)}
qplot(lambda,
sapply(lambda, fn,
geom = 'line',
main = 'Likelihood as a Function of P',
xlab = 'P',
ylab = 'Likelihood')
lambda <- seq(0, 12, by = 0.001)
lambda <- seq(0, 12, by = 0.001)
qplot(lambda,
sapply(lambda, function(lambda) {likelihood(obs, freq, lambda)},
geom = 'line',
main = 'Likelihood as a Function of P',
xlab = 'P',
ylab = 'Likelihood')
2^2
x <- 2^2
x
obs[1]
optimize(fn, interval = c(0,12), maximum = T)
likelihood <- function(obs, freq, lambda)
{
likelihood <- 1
for (a in 1:length(obs))
{
likelihood <- likelihood * ((lambda^obs[a] * exp(-lambda))/factorial(obs[a]))^freq[a]
}
return(likelihood)
}
Pois <- function(x, lambda) lambda^x/factorial(x) * exp(-lambda)
likelihood <- function(obs, freq, lambda)
{
likelihood <- 1
for (a in 1:length(obs))
{
likelihood <- likelihood * Pois(obs[a], lambda) ^freq[a]
}
return(likelihood)
}
qplot(lambda,
sapply(lambda, function(lambda) {likelihood(obs, freq, lambda)},
geom = 'line',
main = 'Likelihood as a Function of P',
xlab = 'P',
ylab = 'Likelihood')
optimize(fn, interval = c(0,12), maximum = T)
fn <- function(lambda) {likelihood(obs, freq, lambda)}
optimize(fn, interval = c(0,12), maximum = T)
rbinom(50, size=1, prob=pi/4)
sd(D)
X = runif(100000,-1,1)
Y = runif(100000,-1,1)
D = 0
for (i in c(1:100000)){
D[i] = ifelse( (X[i])^2 + (Y[i])^2 < 1, 1, 0)
}
sd(D)
sqrt(3)*pi/4
(pi/4)*(3pi/4)
(pi/4)*(3*pi/4)
sqrt((pi/4)*(3*pi/4))
sqrt(pi/4 - pi^2/16)
mean(D)
sd(D)
for (i in c(1:10)){
D[i] = ifelse( (X[i])^2 + (Y[i])^2 < 1, 1, 0)
}
sd(D)
D = 0
for (i in c(1:10)){
D[i] = ifelse( (X[i])^2 + (Y[i])^2 < 1, 1, 0)
}
sd(D)
sqrt(pi/4 - pi^2/16)/10
dnorm(0)
pnorm(0)
pnorm(0.96)
pnorm(0.96) - pnorm(-2.36)
pnorm(-0.94) - pnorm(-2.36)
pnorm((3/4-pi/4)/sqrt(pi/4 - pi^2/16)/10)
(3/4-pi/4)/sqrt(pi/4 - pi^2/16)/10
(3/4-pi/4)/(sqrt(pi/4 - pi^2/16)/10)
pnorm((3/4-pi/4)/(sqrt(pi/4 - pi^2/16)/10))
1- pnorm((3/4-pi/4)/(sqrt(pi/4 - pi^2/16)/10))
knitr::opts_chunk$set(echo = TRUE)
X = runif(100,-1,1)
Y = runif(100,-1,1)
D = 0 #to clear D
for (i in c(1:10)){
D[i] = ifelse( (X[i])^2 + (Y[i])^2 < 1, 1, 0)
for (i in c(1:10)){
D[i] = ifelse( (X[i])^2 + (Y[i])^2 < 1, 1, 0)
}
D = 0 #to clear D
for (i in c(1:10)){
D[i] = ifelse( (X[i])^2 + (Y[i])^2 < 1, 1, 0)
}
mean(D)
for (i in c(1:10)){
D[i] = ifelse( (X[i])^2 + (Y[i])^2 < 1, 1, 0)
}
mean(D)
knitr::opts_chunk$set(echo = TRUE)
;
end
quit
D = 0
X = runif(100,-1,1)
Y = runif(100,-1,1)
knitr::opts_chunk$set(echo = TRUE)
X = runif(100,-1,1)
Y = runif(100,-1,1)
D = 0
for (i in c(1:100)){
D[i] = ifelse( (X[i])^2 + (Y[i])^2 < 1, 1, 0)
}
mean(D)
mean(D)
f <- function(n) {
X = runif(n,-1,1)
Y = runif(n,-1,1)
D = 0
for (i in c(1:100)){
D[i] = ifelse( (X[i])^2 + (Y[i])^2 < 1, 1, 0)
}
}
f <- function(n) {
X = runif(n,-1,1)
Y = runif(n,-1,1)
D = 0
for (i in c(1:n)){
D[i] = ifelse( (X[i])^2 + (Y[i])^2 < 1, 1, 0)
}
}
f(100)
f(1000)
f <- function(n) {
X = runif(n,-1,1)
Y = runif(n,-1,1)
D = 0
for (i in c(1:n)){
D[i] = ifelse( (X[i])^2 + (Y[i])^2 < 1, 1, 0)
}
return(D)
}
D_100 = f(1000)
f <- function(n) {
X = 0
Y = 0
D = 0
X = runif(n,-1,1)
Y = runif(n,-1,1)
for (i in c(1:n)){
D[i] = ifelse( (X[i])^2 + (Y[i])^2 < 1, 1, 0)
}
return(D)
}
D_1000 = f(1000)
X = 0
Y = 0
D = 0
D_1000 = f(1000)
f <- function(n) {
rm(X,Y,D)
X <- runif(n,-1,1)
Y <- runif(n,-1,1)
for (i in c(1:n)){
D[i] = ifelse( (X[i])^2 + (Y[i])^2 < 1, 1, 0)
}
return(D)
}
D_1000 = f(1000)
D_10 = f(10)
D_10 = f(10)
f <- function(n) {
X <- runif(n,-1,1)
Y <- runif(n,-1,1)
D = 0
for (i in c(1:n)){
D[i] = ifelse( (X[i])^2 + (Y[i])^2 < 1, 1, 0)
}
return(D)
}
D_10 = f(10)
D
D_10
set.seed(15) #set seed for reproducible results
D_100 = f(100)
mean(D_100)
draws <- replicate(10000, f(100))
draws
draws <- replicate(10, mean(f(100)))
draws
draws <- replicate(10000, mean(f(100)))
hist(draws, main = "Histogram of Sample Means")
hist(draws, breaks = 50, main = "Histogram of Sample Means")
sd(draws)
sqrt(pi/4 - pi^2/16)/10
sum(draws > 3/4)
frac <- sum(draws > 3/4)/1000
sum(draws > 3/4)/1000
sum(draws > 3/4)/10000
draws <- replicate(1000000, mean(f(100)))
draws <- replicate(100000, mean(f(100)))
hist(draws, breaks = 50, main = "Histogram of Sample Means")
sum(draws > 3/4)/10000
sum(draws > 3/4)/100000
draws <- replicate(10000, mean(f(100)))
hist(draws, breaks = 50, main = "Histogram of Sample Means")
sum(draws > 3/4)/10000
1- pnorm((3/4-pi/4)/(sqrt(pi/4 - pi^2/16)/sqrt(99)))
1- pnorm((3/4-pi/4)/(sqrt(pi/4 - pi^2/16)/sqrt(100)))
draws <- replicate(10000, mean(f(100)))
hist(draws, breaks = 50, xlab = "Sample Mean", main = "Histogram of Sample Means")
?TDist
dt(0.025,1000)
dt(0.05,1000)
dt(c(0.025, 0.975),1000)
qt(c(0.025, 0.975),1000)
qt(c(0.025, 0.975),99)
pt(1.96, 9)
pt(1.962, 9)
pt(1.984, 99)
pt(1.96, 9)
(1 - pt(1.96,9))*2
(1 - pt(1.984,99))*2
(1 - pt(1.96,199))*2
knitr::opts_chunk$set(echo = TRUE)
times = c(2.65871285, 8.34273228, 5.09845548, 7.15064545,
0.39974647, 0.77206050, 5.43415199, 0.36422211,
3.30789126, 0.07621921, 2.13375997, 0.06577856,
1.73557740, 0.16524304, 0.27652044)
log.lklh.poisson <- function(x, lambda){
sum(log(lambda - x * lambda)
}
log.lklh.poisson <- function(x, lambda){
sum(log(lambda) - x * lambda)
}
library(ggplot2)
lambda <- seq(0,10,by = 0,01)
lambda <- seq(0 ,10 ,by = 0,01)
lambda <- seq(0 ,10 ,by = 0.01)
qplot(lambda,
function(x, lambda)
)
qplot(lambda,
log.lklh.poisson(x, lambda)
)
qplot(lambda,
log.lklh.poisson(times, lambda)
)
qplot(lambda,
sapply(lambda, function(lambda){log.lklh.poisson(times, lambda)})
)
log.lklh.poisson <- function(x, lambda){
-sum(log(lambda) - x * lambda)
}
qplot(lambda,
sapply(lambda, function(lambda){log.lklh.poisson(times, lambda)})
)
log.lklh.poisson <- function(x, lambda){
sum(log(lambda) - x * lambda)
}
qplot(lambda,
sapply(lambda, function(lambda){log.lklh.poisson(times, lambda)})
)
mean(times)
```{r}
qplot(lambda,
sapply(lambda, function(lambda){log.lklh.poisson(times, lambda)}),
geom = 'line',
main = 'Likelihood as a Function of Lambda',
xlab = 'Lambda'
ylab = 'Likelihood'
library(ggplot2)
lambda <- seq(0 ,10 ,by = 0.01)
qplot(lambda,
sapply(lambda, function(lambda){log.lklh.poisson(times, lambda)}),
geom = 'line',
main = 'Likelihood as a Function of Lambda',
xlab = 'Lambda',
ylab = 'Likelihood'
)
fn <- function(lambda){log.lklh.poisson(times, lambda)}
optimize(fn, interval(0,10), maximum = T)
optimize(fn, interval=c(0,10), maximum = T)
lambda_optim = optimize(fn, interval=c(0,10), maximum = T)$maximum
1/mean(times)
lambda_optim
lambda_optim = optimize(fn, interval=c(0,10), maximum = T)$maximum
lambda_optim
1/mean(times)
qt(c(0.025, 0.975),5)
qt(c(0.025, 0.975),seq(1,10,by = 1))
for(s in 1:10) print(qt(c(0.025,0.975),s))
x = c(11.77, 11.90, 11.64, 11.84, 12.13, 11.99,11.77)
mean(x)
sd(x)
qt(.975, 6)
(means(x) - 12)/(sd(x)/sqrt(7))
(vec - 12)/(sd(vec)/sqrt(7))
(x - 12)/(sd(vec)/sqrt(7))
(x - 12)/(sd(x)/sqrt(7))
(mean(x) - 12)/(sd(x)/sqrt(7))
t = (mean(x) - 12)/(sd(x)/sqrt(7))
p = qt((mean(x) - 12)/(sd(x)/sqrt(7)), 6)
z.test(x, mu = 12)
load("athlet2.RData")
load("athlet2.RData")
load("~/Desktop/W203/Live Session/Live Session 8/live_session_8/athlet2.RData")
summary(data)
summary(desc)
hist(desc)
hist(dscore)
hist(data$dscore)
hist(data$dscore, breaks = 50)
knitr::opts_chunk$set(echo = TRUE)
getwd()
setwd(/Users/shanhe/Desktop/w203/Homework/Week 8)
setwd("/Users/shanhe/Desktop/w203/Homework/Week 8")
load("GPA1.RData")
setwd("/Users/shanhe/Desktop/w203/Homework/Week 8")
load("GPA1.RData")
setwd("/Users/shanhe/Desktop/w203/Homework/Week 8/HW8")
load("GPA1.RData")
summary(data)
summary(data$skipped)
length(data$skipped)
summary(data$skipped)
length(data$skipped)
hist(data@skipped)
summary(data$skipped)
length(data$skipped)
hist(data$skipped)
summary(data)
data
t.test(data$skipped, mu = 1)
mean(data$skipped)
hist(data$skipped)
length(data$skipped)
hist(data$skipped, breaks = 5)
length(data$skipped)
hist(data$skipped, breaks = 5, main = 'Histogram of Lecture(s) Skipped per Week', xlab = 'Lecture(s) Skipped per Week')
source('~/.active-rstudio-document', echo=TRUE)
knitr::opts_chunk$set(echo = TRUE)
hist(data$skipped, breaks = 5, main = 'Histogram of Lecture(s) Skipped per Week', xlab = 'Lecture(s) Skipped per Week')
```{r examine data}
length(data$skipped)
t.test(data$skipped, mu = 1)
t = (mean(data$skipped) - 1)/( sd(data$skipped) / sqrt(length(data$skipped)))
t
pt(t, 140)
pt(0, 140)
pt(t, 140)
p_value = 2* (1-pt(t, 140))
p_value
t.test(data$skipped, mu = 1, conf.interval = 0.99)
t.test(data$skipped, mu = 1, conf.level = 0.99)
t.test(data$skipped, mu = 1, conf.level = 0.99)
qt(0.995, 140)
t_0.995 = qt(0.995, 140)
qt(0.995, 140)
qt(0.995, 140)*(sd(data$skipped) / sqrt(length(data$skipped)))
qt(c(0.005,0.995), 140)*(sd(data$skipped) / sqrt(length(data$skipped)))
mean(data$skipped) + qt(c(0.005,0.995), 140)*(sd(data$skipped) / sqrt(length(data$skipped)))
t.test(data$skipped, mu = 1, conf.level = 0.99)
mean(data$skipped) + qt(c(0.005,0.995), 140)*(sd(data$skipped) / sqrt(length(data$skipped)))
CI_99
CI_99 = mean(data$skipped) + qt(c(0.005,0.995), 140)*(sd(data$skipped) / sqrt(length(data$skipped)))
CI_99
